clear
a <- 10
5 + 5
a <- 15
a <- 15
b <- 6*9
b
b <-
b <-
c <-
c <- 9
b <- 6*9
a <- 10
a <- 10
b <- 6*9
c <- 9
d <- a + b + c
a <- 10
b <- 6*9
c <- 9
d <- a + b + c
caractere <- "pessoa"
string1 <- "pessoa"
string2 <- "pessoa2"
2 + 5
4 - 6 # subtração
2 * 4 # multiplicação
2**10 # potenciação
80/4 # divisão
10 %% 3
10 // 3
a <- 3*2
class(a)
9 * 3 -> c
a
c
f
f <- c + d + e
f <- c + d + e
d <- TRUE
e <- FALSE
f <- c + d + e
f
class(f)
x <- "teste"
class(x)
x1 <- c(3, 10, 78)
lenght(x1)
class(x1)
sum(x1)
mean(x1)
x[1] # A linguagem R começa com indexação em 1, e não no 0
x1[1] # A linguagem R começa com indexação em 1, e não no 0
x1[c(1, 2, 3)] # posições
c(x1, 67, 90)
x2 <- c(x1, 67, 90) # concatenando vetores
x2
x2 < 70
sum(x2<70)
soma -> sum(x2<70)
soma
soma <- sum(x2<70)
soma
sum(x2[x2<70])
x1[1] # A linguagem R começa com indexação em 1, e não no 0
x1[c(1, 2, 3)] # acessando posições
x2 <- c(x1, 67, 90) # concatenando vetores
x2
x2 < 70
soma <- sum(x2<70)
soma
sum(x2[x2<70])
! TRUE # negação de TRUE
x2 == 72
x2 != 10
x1
print(x1)
x2 < 70
random_dado <- sample(1:6, 100)
random_dado <- sample(1:6, 100, replace = TRUE)
random_dado
class(random_dado)
random_dado <- sample(1:6, 1000000, replace = TRUE)
random_dado
mean(3)
mean(3, random_dado)
count_3 <- sum(random_dado == 3)
count_3
chance_de_ser_3 <- length(random_dado) / count_3
chance_de_ser_3
chance_de_ser_3 <- count_3 / length(random_dado)
chance_de_ser_3
chance_de_ser_3
random_dado <- sample(1:6, 1000000, replace = TRUE)
random_dado
count_3 <- sum(random_dado == 3)
chance_de_ser_3 <- count_3 / length(random_dado)
chance_de_ser_3
random_dado <- sample(1:6, 10000000, replace = TRUE)
random_dado
count_3 <- sum(random_dado == 3)
chance_de_ser_3 <- count_3 / length(random_dado)
chance_de_ser_3
numeros <- c(1, 23, 543, 32, 23)
numeros
?numeros
?c
numeros[1]
numeros <- c(5, 23, 543, 32, 23)
numeros[1]
summary(numeros)
nome <- "Henrique"
sobrenome <- "Matos"
nome_completo <- str_c(nome, sobrenome)
install.packages("stringr")
library(stringr)
library(stringi)
detach("package:stringr", unload = TRUE)
detach("package:stringi", unload = TRUE)
library(stringr)
nome_completo <- str_c(nome, sobrenome)
nome_completo
library(stringr)
nome_completo <- str_c(nome, " ",  sobrenome)
nome_completo
3*a
a <- c(1, 2, 5)
b <- c(10, 12)
3*a
3+2
a
3+a
a+b
d <- c(a, 6)
d+b
x <- 0
for (i in 1:20) {
x <- x + 1
}
x
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
duplicated(aniversarios)
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
any(duplicated(aniversarios))
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
any(duplicated(aniversarios))
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
any(duplicated(aniversarios))
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
any(duplicated(aniversarios))
resultados <- c()
for (j in 10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
resultados[j] <- anyDuplicated(aniversarios)
}
mean(resultados)
resultados <- c()
for (j in 10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for (j in 10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 70, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
aniversarios <- sample(x = 1:365, size = 42, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 42, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
calcula_probabilidade <- function(n) {
resultados <- c()
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = n, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
return(mean(resultados))
}
calcula_probabilidade(n = 45)
calcula_probabilidade(n = 366)
bilhete %in% sorteio
bilhete <- c(4, 5, 12, 43, 21, 34)
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
bilhete %in% sorteio
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas
semanas
semanas
semanas
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
semanas <- 0
acertos <- 0
while (acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
install.packages("palmerpenguins")
library(palmerpenguins)
penguins
number1 <- 5
number2 <- 6
number3 <- 0
if (number1 > number2) {
number3 <- number1 + number2
} else {
number3 <- number1 - number3
}
number3
number1 <- 5
number2 <- 6
number3 <- 0
if (number1 > number2) {
number3 <- number1 + number2
} else {
number3 <- number1 - number2
}
number3
x <- 0
for (i in 1:20) {
x <- x + 1
}
x
x <- 0
soma <- 0
for (i in 1:10) {
x <- x + 1
soma <- soma + x
}
x
soma
source("~/Documents/R-language/Aulas/aula2.R", echo=TRUE)
calcula_probabilidade <- function(n) {
resultados <- c()
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = n, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
return(mean(resultados))
}
calcula_probabilidade(n = 366)
calcula_probabilidade <- function(n) {
resultados <- c()
for (j in 1:10000) {
aniversarios <- sample(x = 1:365, size = n, replace = TRUE)
resultados[j] <- any(duplicated(aniversarios))
}
return(mean(resultados))
}
calcula_probabilidade(n = 70)
terceira_homens <- homens[homens$Pclass == 3, ]
homens <- dados[dados$Sex == "male",]
dados <- read.table(file = "titanic.txt", header = TRUE, sep = ",")
dados <- read.table(file = "titanic.txt", header = TRUE, sep = ",")
homens <- dados[dados$Sex == "male",]
terceira_homens <- homens[homens$Pclass == 3, ]
titanic <- read.table(file = "titanic.txt", sep = ",", header = TRUE)
setwd("~/Documents/R-language/Aulas")
titanic <- read.table(file = "titanic.txt", sep = ",", header = TRUE)
titanic <- titanic[,-c(1,9:12)]
str(titanic)
titanic$Survived <- as.factor(titanic$Survived)
titanic$Pclass <- as.factor(titanic $Pclass)
titanic$Sex <- as.factor(titanic $Sex)
summary(titanic)
ggplot(data = titanic, aes(x = Survived))+
geom_bar(fill = "blue")+
theme_minimal()
titanic <- read.table(file = "titanic.txt", sep = ",", header = TRUE)
library(ggplot2)
titanic <- titanic[,-c(1,9:12)]
str(titanic)
titanic$Survived <- as.factor(titanic$Survived)
titanic$Pclass <- as.factor(titanic $Pclass)
titanic$Sex <- as.factor(titanic $Sex)
summary(titanic)
ggplot(data = titanic, aes(x = Survived))+
geom_bar(fill = "blue")+
theme_minimal()
ggplot(data = titanic, aes(x = Survived, fill = Sex))+
geom_bar()+
theme_minimal()
ggplot(data = titanic, aes(fill = Survived, x = Sex))+geom_bar()+
scale_fill_manual(values = c("0" = "#331F40", "1" = "#6A2473"))
